#!/usr/bin/env bash

# Environment variables that have been set during image build 
ZK_USER=${ZK_USER:-"zk"}
ZK_HOME=${ZK_HOME:-"/zk"}
ZK_DATADIR=${ZK_DATADIR:-"/zk_data"}
ZK_DATALOGDIR=${ZK_DATALOGDIR:-"/zk_datalog"}
ZK_LOG_DIR=${ZK_LOG_DIR:-"/zk_log"}

# Additional environment variables required to execute startup scripts
ZK_REPLICAS=${ZK_REPLICAS:-"1"}
ZK_LOG_LEVEL=${ZK_LOG_LEVEL:-"INFO"}
ZK_LOG_DIR=${ZK_LOG_DIR:-"/var/log/zookeeper"}
ZK_CONF_DIR=${ZK_CONF_DIR:-"$ZK_HOME/conf"}
ZK_CLIENT_PORT=${ZK_CLIENT_PORT:-2181}
ZK_SERVER_PORT=${ZK_SERVER_PORT:-2888}
ZK_ELECTION_PORT=${ZK_ELECTION_PORT:-3888}
ZK_TICK_TIME=${ZK_TICK_TIME:-2000}
ZK_INIT_LIMIT=${ZK_INIT_LIMIT:-10}
ZK_SYNC_LIMIT=${ZK_SYNC_LIMIT:-5}
ZK_HEAP_SIZE=${ZK_HEAP_SIZE:-128M}
ZK_MAX_CLIENT_CNXNS=${ZK_MAX_CLIENT_CNXNS:-60}
ZK_MIN_SESSION_TIMEOUT=${ZK_MIN_SESSION_TIMEOUT:- $((ZK_TICK_TIME*2))}
ZK_MAX_SESSION_TIMEOUT=${ZK_MAX_SESSION_TIMEOUT:- $((ZK_TICK_TIME*20))}
ZK_SNAP_RETAIN_COUNT=${ZK_SNAP_RETAIN_COUNT:-3}
ZK_PURGE_INTERVAL=${ZK_PURGE_INTERVAL:-0}
ZK_STATIC_CONFIG="$ZK_CONF_DIR/zoo.cfg"
ZK_DYNAMIC_CONFIG="$ZK_CONF_DIR/zoo.cfg.dynamic"
ZK_PEER_TYPE=${ZK_PEER_TYPE:-"participant"}
ZOO_DATADIR_AUTOCREATE_DISABLE=1
ID_FILE="$ZK_DATADIR/myid"
LOGGER_PROPS_FILE="$ZK_CONF_DIR/log4j.properties"
JAVA_ENV_FILE="$ZK_CONF_DIR/java.env"
HOST=`hostname -s`
DOMAIN=`hostname -d`


function print_servers() {
    for (( i=1; i<=$ZK_REPLICAS; i++ ))
    do
      echo "server.$i=$NAME-$((i)).$DOMAIN:$ZK_SERVER_PORT:$ZK_ELECTION_PORT:$ZK_PEER_TYPE;$ZK_CLIENT_PORT"
    done
}


function validate_env() {
    echo "Validating environment"
    if [ -z $ZK_REPLICAS ]; then
        echo "ZK_REPLICAS is a mandatory environment variable"
        exit 1
    fi

    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=$(echo $HOST | cut -d '-' -f 1)
        ORD=$(echo $HOST | cut -d '-' -f 2)
        
        #NAME=${BASH_REMATCH[1]}
        #ORD=${BASH_REMATCH[2]}
    else
        echo "Failed to extract ordinal from hostname $HOST"
        exit 1
    fi

    MY_ID=$((ORD))
    echo "ZK_REPLICAS=$ZK_REPLICAS"
    echo "MY_ID=$MY_ID"
    echo "ZK_LOG_LEVEL=$ZK_LOG_LEVEL"
    echo "ZK_DATADIR=$ZK_DATADIR"
    echo "ZK_DATALOGDIR=$ZK_DATALOGDIR"
    echo "ZK_LOG_DIR=$ZK_LOG_DIR"
    echo "ZK_CLIENT_PORT=$ZK_CLIENT_PORT"
    echo "ZK_SERVER_PORT=$ZK_SERVER_PORT"
    echo "ZK_ELECTION_PORT=$ZK_ELECTION_PORT"
    echo "ZK_TICK_TIME=$ZK_TICK_TIME"
    echo "ZK_INIT_LIMIT=$ZK_INIT_LIMIT"
    echo "ZK_SYNC_LIMIT=$ZK_SYNC_LIMIT"
    echo "ZK_MAX_CLIENT_CNXNS=$ZK_MAX_CLIENT_CNXNS"
    echo "ZK_MIN_SESSION_TIMEOUT=$ZK_MIN_SESSION_TIMEOUT"
    echo "ZK_MAX_SESSION_TIMEOUT=$ZK_MAX_SESSION_TIMEOUT"
    echo "ZK_HEAP_SIZE=$ZK_HEAP_SIZE"
    echo "ZK_SNAP_RETAIN_COUNT=$ZK_SNAP_RETAIN_COUNT"
    echo "ZK_PURGE_INTERVAL=$ZK_PURGE_INTERVAL"
    echo "ENSEMBLE"
    print_servers
    echo "Environment validation successful"
}


function create_config() {
    rm -f $ZK_STATIC_CONFIG $ZK_DYNAMIC_CONFIG
    echo "Creating ZooKeeper configuration"
    echo "#This file was autogenerated by k8szk DO NOT EDIT" >> $ZK_STATIC_CONFIG
    echo "standaloneEnabled=false" >> $ZK_STATIC_CONFIG
    echo "4lw.commands.whitelist=ruok, imok, mntr" >> $ZK_STATIC_CONFIG    
    echo "dataDir=$ZK_DATADIR" >> $ZK_STATIC_CONFIG
    echo "dataLogDir=$ZK_DATALOGDIR" >> $ZK_STATIC_CONFIG
    echo "tickTime=$ZK_TICK_TIME" >> $ZK_STATIC_CONFIG
    echo "initLimit=$ZK_INIT_LIMIT" >> $ZK_STATIC_CONFIG
    echo "syncLimit=$ZK_SYNC_LIMIT" >> $ZK_STATIC_CONFIG
    echo "maxClientCnxns=$ZK_MAX_CLIENT_CNXNS" >> $ZK_STATIC_CONFIG
    echo "minSessionTimeout=$ZK_MIN_SESSION_TIMEOUT" >> $ZK_STATIC_CONFIG
    echo "maxSessionTimeout=$ZK_MAX_SESSION_TIMEOUT" >> $ZK_STATIC_CONFIG
    echo "autopurge.snapRetainCount=$ZK_SNAP_RETAIN_COUNT" >> $ZK_STATIC_CONFIG
    echo "autopurge.purgeInteval=$ZK_PURGE_INTERVAL" >> $ZK_STATIC_CONFIG

    echo "dynamicConfigFile=$ZK_DYNAMIC_CONFIG" >> $ZK_STATIC_CONFIG
    echo "Wrote ZooKeeper static configuration file to $ZK_STATIC_CONFIG"

    print_servers >> $ZK_DYNAMIC_CONFIG
    echo "Wrote ZooKeeper dynamic configuration file to $ZK_DYNAMIC_CONFIG"
    
    if [ ! -d $ZK_DATADIR/version-2  ]; then
        mkdir -p $ZK_DATADIR/version-2
        echo "Created ZooKeeper data directory $ZK_DATADIR/version-2"
    fi

    if [ ! -d $ZK_DATALOGDIR/version-2  ]; then
        mkdir -p $ZK_DATALOGDIR/version-2
        echo "Created ZooKeeper log directory $ZK_DATALOGDIR/version-2"
    fi    
    
    if [ ! -f $ID_FILE ]; then
        echo $MY_ID >> $ID_FILE
        echo "Wrote ZooKeeper id file in $ID_FILE"
    fi
}


function create_log4j_props() {
    rm -f $LOGGER_PROPS_FILE
    echo "zookeeper.root.logger=CONSOLE" >> $LOGGER_PROPS_FILE
    echo "zookeeper.console.threshold="$ZK_LOG_LEVEL >> $LOGGER_PROPS_FILE
    echo "log4j.rootLogger=\${zookeeper.root.logger}" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> $LOGGER_PROPS_FILE
    echo "Wrote log4j configuration to $LOGGER_PROPS_FILE"
}


function create_java_env() {
    rm -f $JAVA_ENV_FILE
    echo "ZOO_LOG_DIR=$ZK_LOG_DIR" >> $JAVA_ENV_FILE
    echo "JVMFLAGS=\"-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE\"" >> $JAVA_ENV_FILE
    echo "Wrote JVM configuration to $JAVA_ENV_FILE"
}


validate_env && create_config && create_log4j_props && create_java_env